generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  name          String?
  surname       String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  password      String?
  role          Role            @default(USER)
  birthDate     DateTime?
  position      String?
  gender        Gender?
  accounts      Account[]
  Authenticator Authenticator[]
  sessions      Session[]
  doctorEvents  Event[]         @relation(name: "DoctorEvents")
  patientEvents Event[]         @relation(name: "PatientEvents")
  Event         Event[]
}

enum Gender {
  MALE
  FEMALE
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Service {
  id          String   @id @default(uuid())
  name        String
  description String?
  duration    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  price       Float
  Event       Event[]
}

enum Role {
  ADMIN
  MANAGER
  USER
}

model Event {
  id        String   @id @default(uuid())
  title     String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])
  doctorId  String
  doctor    User     @relation(name: "DoctorEvents", fields: [doctorId], references: [id])
  patientId String
  patient   User     @relation(name: "PatientEvents", fields: [patientId], references: [id])
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}
